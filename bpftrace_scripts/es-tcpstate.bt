#!/usr/bin/env bpftrace
/*
 * tcpdrop.bt   Trace TCP kernel-dropped packets/segments.
 *              For Linux, uses bpftrace and eBPF.
 *
 * USAGE: tcpdrop.bt
 *
 * This is a bpftrace version of the bcc tool of the same name.
 * It is limited to ipv4 addresses, and cannot show tcp flags.
 *
 * This provides information such as packet details, socket state, and kernel
 * stack trace for packets/segments that were dropped via tcp_drop().

 * Copyright (c) 2018 Dale Hamel.
 * Licensed under the Apache License, Version 2.0 (the "License")

 * 23-Nov-2018  Dale Hamel  created this.
 */

#include <linux/socket.h>
#include <net/sock.h>

BEGIN
{
  printf("Tracing tcp drops. Hit Ctrl-C to end.\n");
  printf("%-8s %-8s %-16s %-21s %-21s %-8s\n", "TIME", "PID", "COMM", "SADDR:SPORT", "DADDR:DPORT", "STATE");

  // See https://github.com/torvalds/linux/blob/master/include/net/tcp_states.h
  @tcp_states[1] = "ESTABLISHED";
  @tcp_states[2] = "SYN_SENT";
  @tcp_states[3] = "SYN_RECV";
  @tcp_states[4] = "FIN_WAIT1";
  @tcp_states[5] = "FIN_WAIT2";
  @tcp_states[6] = "TIME_WAIT";
  @tcp_states[7] = "CLOSE";
  @tcp_states[8] = "CLOSE_WAIT";
  @tcp_states[9] = "LAST_ACK";
  @tcp_states[10] = "LISTEN";
  @tcp_states[11] = "CLOSING";
  @tcp_states[12] = "NEW_SYN_RECV";
}

kprobe:tcp_set_state
{
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;

  if ($inet_family == AF_INET || $inet_family == AF_INET6) {
    if ($inet_family == AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);

    $state = $sk->__sk_common.skc_state;
    $statestr = @tcp_states[$state];

    printf("tcpstate,%d,%d,%d,%s,", pid, cgroup, cpu, comm);
    printf("%s,%d,%s,%d,%s,%d,0x%llx,", $saddr, $lport, $daddr, $dport, $statestr, $sk->sk_ack_backlog, arg0);
    time("%s");
    printf("\n");
  }
}

END
{
  clear(@tcp_states);
}

/*
 * tcpstate,4647,1711,1,kubelet,127.0.0.1,10248,127.0.0.1,39016,CLOSE_WAIT,0,0xffffa0b781b99180,1616633085
 * tcpstate,4647,1711,1,kubelet,127.0.0.1,39016,127.0.0.1,10248,FIN_WAIT1,0,0xffffa0b7a46a4ec0,1616633085
 * tcpstate,4647,1711,1,kubelet,127.0.0.1,39016,127.0.0.1,10248,FIN_WAIT2,0,0xffffa0b7a46a4ec0,1616633085
 * tcpstate,4647,1711,1,kubelet,127.0.0.1,10248,127.0.0.1,39016,LAST_ACK,0,0xffffa0b781b99180,1616633085
 * 
 */
